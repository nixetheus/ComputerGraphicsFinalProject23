#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 DlightDir;		// direction of the direct light	vec3 DlightColor;	// color of the direct light	vec3 AmbLightColor;	// ambient light	vec3 eyePos;		// position of the viewer} gubo;layout(set = 1, binding = 0) uniform SpotUniformBufferObject {	vec3 lightPos;	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} spot;layout(set = 2, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 2, binding = 1) uniform sampler2D tex;layout(set = 2, binding = 2) uniform sampler2D texEmit;// SPOT LIGHT CONSTANTSconst float beta = 1.5f;const float g = 10;const float cosout = 0.85;const float cosin  = 0.95;void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.DlightDir);			// light direction	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = ubo.sColor;	vec3 MA = albedo * ubo.amb;	vec3 LA = gubo.AmbLightColor;	// SpotLight Shader	vec3 spotLightDir = normalize(spot.lightPos - fragPos);	vec3 spotLightColor = vec3(spot.lightColor) * pow(g / length(spot.lightPos - fragPos), beta) *                      clamp(((dot(spotLightDir, -spot.lightDir)) - cosout) / (cosin - cosout), 0.0, 1.0);	vec3 spotDiffuse = spotLightColor * MD * clamp(dot(N, spotLightDir), 0.0, 1.0);		// Final Vector	vec3 Diffuse = spotDiffuse;		// Final output	outColor = vec4(clamp(Diffuse, 0.0f, 1.0f), 1.0f);}